generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model products {
  id                 String               @id @default(uuid())
  model              String?
  major              String?
  minor              String?
  brand              String?
  data               Json
  created_at         DateTime             @default(now())
  type               String?
  features           String[]
  width              String?
  fuelType           String[]
  configuration      String[]
  productType        String[]
  slug               String?              @unique
  popularity         Int                  @default(0)
  category           String?
  closeout_inventory closeout_inventory[]
}

model closeout_inventory {
  id           String   @id @default(uuid())
  productId    String
  modelNumber  String
  acumaticaSku String   @unique
  price        Decimal?
  quantity     Int      @default(0)
  lastSyncedAt DateTime @default(now())
  product      products @relation(fields: [productId], references: [id])

  @@index([productId])
  @@index([modelNumber])
}

model accounts {
  id                    String    @id
  createdAt             DateTime
  updatedAt             DateTime
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  userId                String
  users                 users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model sessions {
  id             String   @id
  createdAt      DateTime
  updatedAt      DateTime
  expiresAt      DateTime
  token          String   @unique
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  userId         String
  users          users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model users {
  id            String     @id
  createdAt     DateTime
  updatedAt     DateTime
  name          String
  email         String     @unique
  emailVerified Boolean
  image         String?
  baid          String?    @db.VarChar(64)
  accounts      accounts[]
  sessions      sessions[]
}

model verifications {
  id         String    @id
  createdAt  DateTime?
  updatedAt  DateTime?
  identifier String
  value      String
  expiresAt  DateTime
}

model ErpOrderSummary {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  baid         String   @db.VarChar(64)
  orderNbr     String   @db.VarChar(64)

  locationId   String?  @db.VarChar(64)
  jobName      String?  @db.VarChar(128) // was: locationName
  status       String   @db.VarChar(48)
  deliveryDate DateTime?
  shipVia      String?  @db.VarChar(64)

  lastSeenAt   DateTime @default(now())
  isActive     Boolean  @default(true)

  // Relations
  address      ErpOrderAddress?
  contact      ErpOrderContact?
  payment      ErpOrderPayment?
  lines        ErpOrderLine[]

  @@unique([baid, orderNbr], name: "baid_orderNbr")
  @@index([baid, deliveryDate])
  @@index([baid, isActive, status])
}

model ErpOrderAddress {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // FK to order (1:1 -> must be unique)
  orderSummaryId  String   @unique @db.VarChar(64)
  order           ErpOrderSummary @relation(fields: [orderSummaryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // convenient filters
  baid            String   @db.VarChar(64)
  orderNbr        String   @db.VarChar(64)

  addressLine1    String?  @db.VarChar(256)
  addressLine2    String?  @db.VarChar(256)
  city            String?  @db.VarChar(128)
  state           String?  @db.VarChar(64)
  postalCode      String?  @db.VarChar(32)

  @@index([orderSummaryId])
  @@index([baid, orderNbr])
}

model ErpOrderContact {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // FK to order (1:1 -> must be unique)
  orderSummaryId  String   @unique @db.VarChar(64)
  order           ErpOrderSummary @relation(fields: [orderSummaryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // convenient filters
  baid            String   @db.VarChar(64)
  orderNbr        String   @db.VarChar(64)

  deliveryEmail   String?  @db.VarChar(256)
  siteNumber      String?  @db.VarChar(128) // Document.AttributeSITENUMBER
  osContact       String?  @db.VarChar(256) // Document.AttributeOSCONTACT

  @@index([orderSummaryId])
  @@index([baid, orderNbr])
}

model ErpOrderPayment {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // FK to order (1:1 -> must be unique)
  orderSummaryId  String    @unique @db.VarChar(64)
  order           ErpOrderSummary @relation(fields: [orderSummaryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // convenient filters
  baid            String    @db.VarChar(64)
  orderNbr        String    @db.VarChar(64)

  orderTotal      Decimal?  @db.Decimal(18, 2)
  unpaidBalance   Decimal?  @db.Decimal(18, 2)

  @@index([orderSummaryId])
  @@index([baid, orderNbr])
}

model ErpOrderLine {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // FK to order (1:M, no unique)
  orderSummaryId  String    @db.VarChar(64)
  order           ErpOrderSummary @relation(fields: [orderSummaryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // convenient filters
  baid            String    @db.VarChar(64)
  orderNbr        String    @db.VarChar(64)

  lineDescription String?   @db.VarChar(512) // Details/LineDescription
  inventoryId     String?   @db.VarChar(128) // Details/InventoryID
  lineType        String?   @db.VarChar(64)  // Details/LineType
  openQty         Decimal?  @db.Decimal(18, 4) // Details/OpenQty
  unitPrice       Decimal?  @db.Decimal(18, 2) // Details/UnitPrice
  usrETA          DateTime?                 // Details/UsrETA (line ETA)

  @@index([orderSummaryId])
  @@index([baid, orderNbr])
}

model ErpSyncRun {
  id         String   @id @default(cuid())
  baid       String   @db.VarChar(64)
  startedAt  DateTime @default(now())
  finishedAt DateTime?
  ok         Boolean?
  note       String?
  @@index([baid, startedAt])
}
